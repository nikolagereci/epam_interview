// Code generated by MockGen. DO NOT EDIT.
// Source: ../event/kafka.go

// Package mock_kafka is a generated GoMock package.
package mock_kafka

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	event "github.com/ngereci/xm_interview/event"
)

// MockKafkaAdapter is a mock of KafkaAdapter interface.
type MockKafkaAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaAdapterMockRecorder
}

// MockKafkaAdapterMockRecorder is the mock recorder for MockKafkaAdapter.
type MockKafkaAdapterMockRecorder struct {
	mock *MockKafkaAdapter
}

// NewMockKafkaAdapter creates a new mock instance.
func NewMockKafkaAdapter(ctrl *gomock.Controller) *MockKafkaAdapter {
	mock := &MockKafkaAdapter{ctrl: ctrl}
	mock.recorder = &MockKafkaAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaAdapter) EXPECT() *MockKafkaAdapterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKafkaAdapter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKafkaAdapterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaAdapter)(nil).Close))
}

// SendEvent mocks base method.
func (m *MockKafkaAdapter) SendEvent(event *event.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockKafkaAdapterMockRecorder) SendEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockKafkaAdapter)(nil).SendEvent), event)
}

// SendEventWithPayload mocks base method.
func (m *MockKafkaAdapter) SendEventWithPayload(eventType event.EventType, payload any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEventWithPayload", eventType, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEventWithPayload indicates an expected call of SendEventWithPayload.
func (mr *MockKafkaAdapterMockRecorder) SendEventWithPayload(eventType, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEventWithPayload", reflect.TypeOf((*MockKafkaAdapter)(nil).SendEventWithPayload), eventType, payload)
}
